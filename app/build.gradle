plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.devtools.ksp'
    id 'androidx.navigation.safeargs.kotlin'
    id 'kotlin-kapt'
    id 'jacoco'
}

jacoco {
    toolVersion = "$jacocoVersion"
}

int VERSION_CODE = 1
String VERSION_NAME = "1.0.0"

String APK_NAME = "Weather"

// This line generates the apk with set name.
project.archivesBaseName = APK_NAME + "_v_" + VERSION_NAME //+ "_" + new Date().format('yyyy.MM.dd-HH.mm')

android {
    namespace = "com.fetch.weather"
    def androidVersions = rootProject.ext.android
    compileSdkVersion androidVersions.compileSdkVersion

    defaultConfig {
        applicationId "com.fetch.weather"
        resValue "string", "app_name", "$APK_NAME"
        minSdkVersion androidVersions.minSdkVersion
        targetSdkVersion androidVersions.targetSdkVersion
        versionCode VERSION_CODE
        versionName VERSION_NAME
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    buildTypes {
        debug {
            //testCoverageEnabled = true
            minifyEnabled false
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

        }
        release {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

   compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    buildFeatures {
        dataBinding true
        viewBinding true
    }

    flavorDimensions 'server'
    productFlavors {
        dev {
            applicationIdSuffix ".dev"
            dimension 'server'
            versionNameSuffix '-dev'
        }

        staging {
            applicationIdSuffix ".staging"
            dimension 'server'
            versionNameSuffix '-staging'
        }

        prod {
            dimension 'server'
        }
    }

    testOptions {
        animationsDisabled true

        unitTests {
            all {
                jvmArgs '-noverify', '-ea'
                jacoco {
                    includeNoLocationClasses = true
                    excludes = ['jdk.internal.*']
                }
            }
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }

    sourceSets {
        all {
            java.srcDir("src/$name/kotlin")
        }
        main{
            jniLibs.srcDirs = ["${rootProject.project(':base').projectDir.absolutePath}/kotlin"]
        }
    }

    applicationVariants.all { variant ->
        variant.sourceSets.java.each {
            it.srcDirs += "build/generated/ksp/${variant.name}/kotlin"
        }
    }

}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testStagingDebugUnitTest', 'createStagingDebugCoverageReport']) {

    group = "Reporting"
    description = "Generate Jacoco coverage reports"

    reports {
        html.required = true
    }

    def androidExclusion = [
            '**/databinding/**/*.*',
            '**/android/databinding/*Binding.*',
            '**/BR.*',
            '**/R.*',
            '**/R$*.*',
            '**/*$*.*',
            '**/*Function*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/**Service.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/*_MembersInjector.*',
            '**/utils/*.*'
    ]
    //for kotlin report
    def debugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/stagingDebug", excludes: androidExclusion)
    def mainSrc = "${project.projectDir}/src/main/java"

    getSourceDirectories().from(files([mainSrc]))
    getClassDirectories().from(files([debugTree]))
    getExecutionData().setFrom(fileTree(dir: project.buildDir, includes: [
            '**/*.exec',
            '**/*.ec']))
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(path: ':data')
    implementation 'com.github.bumptech.glide:glide:4.15.1'

    implementation "androidx.navigation:navigation-ui:$navigation"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation"

    kapt 'com.android.databinding:compiler:3.1.4'
    implementation "com.android.support:support-core-utils:28.0.0"

    // Koin Test
    testImplementation "io.insert-koin:koin-test:$koin_version"
    testImplementation "io.insert-koin:koin-test-junit4:$koin_version"
    androidTestImplementation "io.insert-koin:koin-test-junit4:$koin_version"

    testImplementation "junit:junit:$junit"
    androidTestImplementation "org.mockito:mockito-android:$mockitoVersion"
    testImplementation "org.mockito:mockito-inline:$mockitoVersion"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockitoKotlinVersion"
    testImplementation "androidx.arch.core:core-testing:$coreTestingVersion"
    testImplementation "org.powermock:powermock-api-mockito2:$powerMockVersion"
    testImplementation "org.powermock:powermock-module-junit4:$powerMockVersion"

    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_test"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_test"

    implementation 'androidx.test:core-ktx:1.5.0'
    androidTestImplementation "androidx.test.ext:junit:1.1.5"
    androidTestImplementation "androidx.test.ext:junit-ktx:1.1.5"
    androidTestImplementation "androidx.test:runner:$runner"
    androidTestImplementation "androidx.test:rules:$runner"
    androidTestImplementation "androidx.arch.core:core-testing:$coreTestingVersion"
    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'
    debugImplementation "androidx.fragment:fragment-testing:$fragment_testing"
    debugImplementation "androidx.navigation:navigation-testing:$nav_version"

    androidTestImplementation "androidx.test.espresso:espresso-idling-resource:$espressoCoreVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoCoreVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espressoCoreVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espressoCoreVersion"

}
